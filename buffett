#!/bin/bash

# Aktuelles Verzeichnis speichern
ORIGINAL_DIR=$(pwd)

# Arbeitsverzeichnis als übergeordnetes Verzeichnis des Skripts festlegen
# $0 ist der Pfad zum Skript; realpath löst Symlinks auf
SCRIPT_PATH=$(realpath "$0")
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")
WORK_DIR=$(dirname "$SCRIPT_DIR")


# Logger-Funktion definieren
log() {
	echo "$1"
    logger -t buffett "$1"
}

# Funktion zum Prüfen, ob Docker läuft
check_docker() {
    if ! docker info >/dev/null 2>&1; then
        log "Error: Docker is not running or not accessible"
        cd "$ORIGINAL_DIR"
        exit 1
    fi
    
    # Prüfen, ob ein buffett-duckdb Container läuft
    RUNNING_CONTAINER=$(docker ps -q -f "ancestor=buffett-duckdb:latest")
    if [ -n "$RUNNING_CONTAINER" ]; then
        log "Stopping existing buffett-duckdb container: $RUNNING_CONTAINER"
        docker stop "$RUNNING_CONTAINER" >/dev/null 2>&1 || {
            log "Error: Failed to stop container $RUNNING_CONTAINER"
            cd "$ORIGINAL_DIR"
            exit 1
        }
        log "Container $RUNNING_CONTAINER stopped successfully"
    fi
}

run_docker() {
    local cmd="$1"  # Der Parameter XXXX wird als cmd übergeben

    check_docker
    
    # Prüfen, ob das Verzeichnis existiert
    if [ ! -d "$WORK_DIR" ]; then
        log "Error: Directory $WORK_DIR does not exist"
        cd "$ORIGINAL_DIR"
        exit 1
    fi

    # In das Arbeitsverzeichnis wechseln
    cd "$WORK_DIR" || {
        log "Error: Could not change into $WORK_DIR"
        cd "$ORIGINAL_DIR"
        exit 1
    }

    # Standardwerte
    IMAGE="buffett-duckdb:latest"
    HOST_DIR="$WORK_DIR"
    CONTAINER_DIR="/app"
    mkdir -p "$HOST_DIR/data"
    mkdir -p "$HOST_DIR/database"
    mkdir -p "$HOST_DIR/logs"
    mkdir -p "$HOST_DIR/dashboard"
    mkdir -p "$HOST_DIR/seeds"

    # Docker-Befehl ausführen
    docker run -it \
        -v "$HOST_DIR/data:$CONTAINER_DIR/data" \
        -v "$HOST_DIR/database:$CONTAINER_DIR/database" \
        -v "$HOST_DIR/logs:$CONTAINER_DIR/logs" \
        -v "$HOST_DIR/dashboard:$CONTAINER_DIR/dashboard" \
        -v "$HOST_DIR/seeds:$CONTAINER_DIR/seeds" \
        -p 8080:8080 \
        --user "$(id -u):$(id -g)" \
        "$IMAGE" \
        "$cmd"
}

view_url() {
    local url="$1"  # Der Parameter wird als url übergeben

    # Plattformabhängiger Öffnungsbefehl
    if command -v xdg-open > /dev/null; then
        xdg-open "$url"
    elif command -v open > /dev/null; then
        open "$url"
    else
        log "Error: No suitable command to open $url"
        cd "$ORIGINAL_DIR"
        exit 1
    fi
    log "Dashboard view requested"
}


# Hilfetext Funktion
show_help() {
    echo "Usage: $(basename "$0") [update|view|dbt-docs|build|help|shell]"
    echo "Commands:"
    echo "  update    Run the Docker container"
    echo "  view      Open the dashboard in default browser"
	echo "  dbt-docs  View the dbt documentation for this project"
    echo "  build     Build the Docker image in $WORK_DIR/buffett-build"
    echo "  help      Show this help message"
    echo "  shell     Run the Docker image and enter shell in it"
    echo "Description:"
    echo "  This script manages the Buffett application with Docker."
    echo "  Ensure Docker is installed and running before use."
}

# Parameter prüfen
if [ $# -ne 1 ]; then
    show_help
    exit 1
fi

case "$1" in
    "update")
		run_docker

        # Fehlerprüfung
        EXIT_CODE=$?
        if [ $EXIT_CODE -eq 0 ]; then
            log "Update completed successfully"
        else
            log "Update failed with exit code: $EXIT_CODE"
        fi
        ;;
        
    "dbt-docs")
		run_docker dbt-docs
            
        # Fehlerprüfung
        EXIT_CODE=$?
        if [ $EXIT_CODE -eq 0 ]; then
            log "dbt-docs server starting"
        else
            log "Failed to start dbt-docs server with exit code: $EXIT_CODE"
        fi

        # Warten, bis der Port 8080 verfügbar ist (max. 30 Sekunden)
        TIMEOUT=30
        COUNT=0
        until curl -s http://localhost:8080 >/dev/null 2>&1 || [ $COUNT -eq $TIMEOUT ]; do
            sleep 1
            COUNT=$((COUNT + 1))
        done

        if [ $COUNT -eq $TIMEOUT ]; then
            log "Error: dbt-docs server timeout after $TIMEOUT seconds"
            check_docker # stop the container
            cd "$ORIGINAL_DIR"
            exit 1
        fi
        log "dbt-docs server started successfully"

        # Browser öffnen
        view_url "http://localhost:8080"
        ;;
        
    "shell")
		run_docker shell

        EXIT_CODE=0
        ;;

    "build")
		# Docker prüfen
        check_docker
        
        BUILD_DIR="$WORK_DIR/buffett-build"
        if [ ! -d "$BUILD_DIR" ]; then
            log "Error: Build directory $BUILD_DIR does not exist"
            cd "$ORIGINAL_DIR"
            exit 1
        fi

        cd "$BUILD_DIR" || {
            log "Error: Could not change into $BUILD_DIR"
            cd "$ORIGINAL_DIR"
            exit 1
        }

        docker build -t buffett-duckdb:latest .
        EXIT_CODE=$?
        if [ $EXIT_CODE -eq 0 ]; then
            log "Build completed successfully"
        else
            log "Build failed with exit code: $EXIT_CODE"
        fi
        ;;

    "view")
        DASHBOARD="$WORK_DIR/dashboard/index.html"
        if [ ! -f "$DASHBOARD" ]; then
            log "Error: Dashboard file $DASHBOARD does not exist"
            cd "$ORIGINAL_DIR"
            exit 1
        fi

        # Plattformabhängiger Öffnungsbefehl
        view_url $DASHBOARD
        ;;

    "help")
        show_help
        EXIT_CODE=0
        ;;

    *)
        log "Error: Unknown command '$1'"
        show_help
        cd "$ORIGINAL_DIR"
        exit 1
        ;;
esac

# Zurück zum ursprünglichen Verzeichnis
cd "$ORIGINAL_DIR" || {
    log "Warning: Could not return to $ORIGINAL_DIR"
    exit 1
}

exit $EXIT_CODE
